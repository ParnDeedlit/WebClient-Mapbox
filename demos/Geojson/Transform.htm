<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Transform</title>
  <script include="jquery,moment" src="../../libs/zondyclient/include-lib.js"></script>
  <script include="geohash,geojson," src="../../libs/zondyclient/include-mapboxgl.js"></script>
  <style>
    #mapid {
      height: 635px;
      width: 100%
    }
  </style>
</head>

<body>
  <div id="mapid"></div>
  <script>
    var map = new mapboxgl.Map({
      container: 'mapid',
      style: {
        "version": 8,
        "sources": {
          "osm-tiles": {
            "type": "raster",
            'tiles': [
              "http://c.tile.openstreetmap.org/{z}/{x}/{y}.png"
            ],
            'tileSize': 256
          }
        },
        "layers": [{
          "id": "simple-tiles",
          "type": "raster",
          "source": "osm-tiles",
          "minzoom": 0,
          "maxzoom": 22
        }]
      },
      zoom: 11,
      pitch: 45,
      center: [114.2893, 30.5941]
    });
    //geojson库进行数据转换的一个重要的标准就是，传入的data必须是数组，
    //且几何信息是一级key而不能是嵌套对象里面的key
    var data = [{
        name: 'Location A',
        category: 'Store',
        street: 'Market',
        coordinate: [114.29351806640625, 30.602457940999596]
      },
      {
        name: 'Location B',
        category: 'House',
        street: 'Broad',
        coordinate: [114.21146392822264, 30.56580841410847]
      },
      {
        name: 'Location C',
        category: 'Office',
        street: 'South',
        coordinate: [114.30896759033203, 30.529145036680408]
      }
    ];
    var geojson1 = GeoJSON.parse(data, {
      Point: 'coordinate'//coordinate对应上面数据的coordinate字段
      //geojson格式的Point必须是一维数组
    });

    var data1 = [{
        x: 30.56758209727092,
        y: 114.29300308227539,
        prop0: 'value0'
      },
      {
        line: [
          [
            114.27772521972656,
            30.596399902671457
          ],
          [
            114.25489425659178,
            30.56226095049944
          ],
          [
            114.30450439453125,
            30.54688710949595
          ],
          [
            114.28390502929687,
            30.513765952287702
          ]
        ],
        prop0: 'value0',
        prop1: 0.0
      },
      {
        polygon: [
          [
            [
              114.28201675415039,
              30.57999697131928
            ],
            [
              114.30416107177734,
              30.57999697131928
            ],
            [
              114.30416107177734,
              30.59285355813393
            ],
            [
              114.28201675415039,
              30.59285355813393
            ],
            [
              114.28201675415039,
              30.57999697131928
            ]
          ]
        ],
        prop0: 'value0',
        prop1: {
          "this": "that"
        }
      }
    ];
    var geojson2 = GeoJSON.parse(data1, {
      'Point': ['x', 'y'],//x,y对应经纬度
      'LineString': 'line',//geojson格式的LineString必须是二维数组
      'Polygon': 'polygon'//geojson格式的Polygon必须是三维数组
    });

    var data2 = [{
      name: 'Location A',
      street: 'Market',
      x: 34,
      y: -75
    }];
    var data3 = [{
      name: 'Location B',
      date: '11/23/2012',
      x: 54,
      y: -98
    }];
    GeoJSON.defaults = {
      Point: ['x', 'y'],
      include: ['name'] //改变默认的设置，让data里面必须含有name字段
    };
    var geojson3 = GeoJSON.parse(data2, {});
    var geojson4 = GeoJSON.parse(data3, {});

    //转换完后直接执行某个函数
    GeoJSON.parse(geojson1, { Point: 'coordinate'}, function(geojson){
      //console.log(JSON.stringify(geojson));
      //注意这里不能马上执行map相关的事件，
      //map相关的事件必须map.on('load', function() {}触发时才能初始化对应的map
    });

    map.on('load', function() {
      initMap();
    });

    function initMap(){
        //请特别重视这个图层名字features
      map.addSource('features', {
        "type": "geojson",
        "data": geojson1
      });
      map.addLayer({
        "id": "circleid",
        "type": "circle",
        "source": "features", //必须和上面的features一致
        "paint": {
          "circle-radius": 15, //半径
          "circle-color": "#FF0000", //颜色
          "circle-opacity": 0.8, //透明度
          "circle-stroke-width": 5, //轮廓线宽度
          "circle-stroke-color": "#0000FF", //轮廓线颜色
          "circle-stroke-opacity": 0.7 //轮廓线透明度
          //"circle-translate": [0,0] //表示显示位置基于原始位置上,再按照屏幕坐标进行偏移,这个应该绝大部分都用不上
        }
      });
    }
  </script>
</body>

</html>
