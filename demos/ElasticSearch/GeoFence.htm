<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>leaflet显示</title>
  <script include="jquery,moment" src="../../libs/zondyclient/include-lib.js"></script>
  <script include="els-mapgis,geojson" src="../../libs/zondyclient/include-mapboxgl.js"></script>
  <style>
    #mapid {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
    }

    #info {
      height: 110px;
      width: 200px;
      position: absolute;
      top: 10px;
      left: 10px;
      padding: 6px 8px;
      font: 14px/16px Arial, Helvetica, sans-serif;
      background: white;
      background: rgba(255, 255, 255, 0.8);
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
      border-radius: 5px;
    }

    #info h4 {
      margin: 0 0 5px;
      color: #777;
    }
  </style>
</head>

<body>
  <div id="mapid"></div>
  <div id='info'></div>
  <script>
    mapboxgl.accessToken = 'pk.eyJ1IjoicGFybmRlZWRsaXQiLCJhIjoiY2o1MjBtYTRuMDhpaTMzbXhpdjd3YzhjdCJ9.sCoubaHF9-nhGTA-sgz0sA';
    var map = new mapboxgl.Map({
      container: 'mapid',
      style: {
        "version": 8,
        "sources": {
          "osm-tiles": {
            "type": "raster",
            'tiles': [
              //"http://a.tile.thunderforest.com/transport/{z}/{x}/{y}.png"
              "http://c.tile.openstreetmap.org/{z}/{x}/{y}.png"
            ],
            'tileSize': 256
          }
        },
        "layers": [{
          "id": "simple-tiles",
          "type": "raster",
          "source": "osm-tiles",
          "minzoom": 0,
          "maxzoom": 22
        }]
      },
      zoom: 10,
      pitch: 45,
      center: [108.95, 34.25]
    });

    var polygons = [];  //记录地理围栏的范围,用于查询时传入参数,与上面的paramSpatialOption一致
    var idsList = "";//记录查询的设备id,用于查询是传入参数,与上面的queryField一致

    var trackpoint = {   //用于记录的实时状态
      "type": "FeatureCollection",
      "features": []
    };
    //鼠标移动到对应的点是出现对应的弹出标注
    var popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false
    });

    var timeformat; //记录当前实际时间
    var flashSpeed = 2000; //2秒一刷新
    var timer; //定时器,执行2秒一次查询操作

    updateTime();
    initMap();

    function updateTime() {//实时更新当前时间
      timeformat = moment().format("YYYY-MM-DD HH:mm:ss");
      var timePane = document.getElementById('info');
      timePane.innerHTML = '<h4>北京时间</h4>' +
        '<b>' + timeformat + '</b>' +
        '<h4>刷新速度:</h4><b>' + flashSpeed / 1000 + '秒</b>' +
        '<h4>中间黄色表示监控围栏,红色点表示离开围栏,蓝色表示进入围栏</h4>';
    }

    function initMap() {
      map.on('load', function() {
        initTrackView();
        //请求地理围栏的围栏范围
        $.getJSON('../../data/elasticsearch/geofence.json', function(data) {
          initGeoFencePolygons(data);//初始化请求参数
          initGeoFence(data);//地图显示地理围栏范围
          //初始化请求查询的设备列表
          initCarIds(ip, socket, indexName, typeName, paramSpatialType, paramSpatialOption, queryField);
        });
      });
      //鼠标移动/移出设备点是显示/删除标注,特别注意,下面的track-position-out必须和initTrackView()中的map.addLayer({id: "track-position-in",..}中的id一致,这里是绑定关系
      map.on('mouseenter', 'track-position-out', function(e) {
        map.getCanvas().style.cursor = 'pointer';

        var coordinates = e.features[0].geometry.coordinates.slice();
        var description =" status = " + e.features[0].properties.status
              + " imei = " + e.features[0].properties.imei;

        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        popup.setLngLat(coordinates)
          .setHTML(description)
          .addTo(map);
      });

      map.on('mouseleave', 'track-position-out', function() {
        map.getCanvas().style.cursor = '';
        popup.remove();
      });

      map.on('mouseenter', 'track-position-in', function(e) {
        map.getCanvas().style.cursor = 'pointer';

        var coordinates = e.features[0].geometry.coordinates.slice();
        var description =" status = " + e.features[0].properties.status
              + " imei = " + e.features[0].properties.imei;

        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        popup.setLngLat(coordinates)
          .setHTML(description)
          .addTo(map);
      });

      map.on('mouseleave', 'track-position-in', function() {
        map.getCanvas().style.cursor = '';
        popup.remove();
      });
    }

    //该函数主要用于网络请求判断是否离开围栏时,传入的围栏的范围
    function initGeoFencePolygons(data) {
      for (var index = 0; index < data.features.length; index++) {
        var geoFencePolygon = "";
        var coords = data.features[index].geometry.coordinates[0];
        for (var i = 0; i < coords.length; i++) {
          var point = coords[i];
          geoFencePolygon += "" + point[1] + "," + point[0] + ";";
        }
        polygons.push(geoFencePolygon);
      }
    }

    //地图显示地理围栏范围,更具不同的属性设置不同的颜色
    function initGeoFence(data) {
      map.addSource('geofence', {
        "type": "geojson",
        "data": data
      });
      map.addLayer({
        'id': 'fence',
        'type': 'fill',
        'source': 'geofence',
        'layout': {},
        'paint': {
          'fill-color': {
            "property": 'mpPerimeter',//!!特别注意,geojson属性中一定要有这个属性才行
            "stops": [
              [0.2, "rgb(255,214,0)"],
              [0.3, "rgb(254,173,91)"],
              [0.5, "rgb(254,0,0)"],
              [0.7, "rgb(65,0,64)"]
            ]
          },
          'fill-opacity': 0.5,
          'fill-outline-color': '#FFF'
        }
      });
    }

    //初始化地图中动态设备点的样式,如在围栏内蓝色,不在使用红色等
    function initTrackView() {
      map.addSource('tacker-point', {
        "type": "geojson",
        "data": trackpoint  //trackpoint的内容是根据请求数据变化
      });
      map.addLayer({
        id: "track-position-in",
        type: "circle",
        source: "tacker-point",
        filter: ["==", "result", "true"],//过滤条件,针对result为true的使用蓝色
        paint: {
          "circle-color": "#11b4da",
          "circle-radius": 6,
          "circle-stroke-width": 1,
          "circle-stroke-color": "#fff"
        }
      });
      map.addLayer({
        id: "track-position-out",
        type: "circle",
        source: "tacker-point",
        filter: ["!=", "result", "true"],//过滤条件,针对result为false的使用红色
        paint: {
          "circle-color": "#FF0000",
          "circle-radius": 6,
          "circle-stroke-width": 1,
          "circle-stroke-color": "#fff"
        }
      });
    }

    var ip = "192.168.17.237";
    var socket = "8080";
    var indexName = "df_real";//数据库名称
    var typeName = "df_real_type";//数据库表名
    var paramSpatialType = "polygon";//空间查询类型
    var paramSpatialOption = "34.8904,107.6743;34.8904,110.4648;33.4750,110.4648;33.4750,107.6743";//polygon查询的点,纬度在前,经度在后
    var queryField = "imei"//数据库中对应的设备id
    function initCarIds(ip, socket, db, table, spatial_type, spatial_options, id_field) {
      //getRangeIdsUri实际上是拼接url地址,依赖的库是
      var urlIds = getRangeIdsUri(ip, socket, db, table, spatial_type, spatial_options, id_field);
      idsList = "";
      $.get(urlIds, function(result) {
        for (var index = 0; index < result.length && index < 50; index++) {
          idsList += result[index].id + ",";//拼接id列表,用于post请求
        }
        idsList = idsList.substring(0, idsList.length - 1);//去除最后一个多余的逗号
        timer = self.setInterval("loadRealData()", flashSpeed);//启动定时器,每隔若干秒查询一次

      });
    }

    //加载实时数据,检查是否离开地理围栏
    function loadRealData() {
      var urlCheckFence = "http://192.168.17.237:8080/es/GeoEnclosureQuery";
      var param = {
        indexName: "df_real",
        typeName: "df_real_type",
        spatialCondition: "polygon:" + polygons[0], //"polygon:34.8904,107.6743;34.8904,110.4648;33.4750,110.4648;33.4750,107.6743",
        timefield: "dataTime",
        idfield: "imei",
        ids: idsList
      };

      $.post(urlCheckFence, param, function(data) {
        updateTrackView(data);
      });
    }

    function updateTrackView(data) {
      trackpoint.features = [];//清空上一次请求的数据
      for (var i = 0; i < data.length; i++) {
        var feautre = {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [data[i].geo.lon, data[i].geo.lat]
          },
          "properties": {
            "status": data[i].status,
            "imei": data[i].imei,
            "result": data[i].result
          }
        };
        trackpoint.features.push(feautre);//保存这次请求的数据
      }
      //这里是给之前设定的动态更新图层设置新的数据,实现动态播放的效果
      map.getSource('tacker-point').setData(trackpoint);

    }
  </script>
</body>

</html>
