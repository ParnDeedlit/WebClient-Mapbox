<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>leaflet显示</title>
  <script include="jquery,geojson,moment" src="../../libs/zondyclient/include-lib.js"></script>
  <script include="els-zondy" src="../../libs/zondyclient/include-mapboxgl.js"></script>
  <style>
    #mapid {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
    }

    #info {
      height: 75px;
      width: 140px;
      position: absolute;
      top: 10px;
      left: 10px;
      padding: 6px 8px;
      font: 14px/16px Arial, Helvetica, sans-serif;
      background: white;
      background: rgba(255, 255, 255, 0.8);
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
      border-radius: 5px;
    }

    #info h4 {
      margin: 0 0 5px;
      color: #777;
    }
  </style>
</head>

<body>
  <div id="mapid"></div>
  <div id='info'></div>
  <script>
    mapboxgl.accessToken = 'pk.eyJ1IjoicGFybmRlZWRsaXQiLCJhIjoiY2o1MjBtYTRuMDhpaTMzbXhpdjd3YzhjdCJ9.sCoubaHF9-nhGTA-sgz0sA';
    var map = new mapboxgl.Map({
      container: 'mapid',
      style: 'mapbox://styles/mapbox/light-v8',
      zoom: 10,
      pitch: 45,
      center: [108.95, 34.25]
    });

    var ip = "192.168.17.237";
    var socket = "8080";
    var indexName = "df_history";
    var typeName = "2017-12-17";
    var paramSpatialType = "polygon";
    var paramSpatialOption = "34.8904,107.6743;34.8904,110.4648;33.4750,110.4648;33.4750,107.6743";
    var queryField = "imei"

    var ids;// = [];

    var mapExtent, mapLevel, startTime, endTime, geojson, timeformat;
    flashSpeed = 2000; //2秒一刷新
    var timer;
    updateTime();

    map.on('load', function() {
      $.getJSON('../../data/elasticsearch/geofence.json', function(data) {
        initGeoFence(data);
        initCarIds(ip, socket, indexName, typeName, paramSpatialType, paramSpatialOption, queryField);
        timer = self.setInterval("clock()", flashSpeed);
      });
    });

    function clock() {
      updateTime();
    };

    function updateTime(){
      timeformat = moment().format("YYYY-MM-DD HH:mm:ss");
      var timePane = document.getElementById('info');
      timePane.innerHTML = '<h4>北京时间</h4>' +
          '<b>' + timeformat + '</b>' +
          '<h4>刷新速度:</h4><b>' + flashSpeed/1000 + '秒</b>';
    }

    function initGeoFence(data) {
      map.addSource('geofence', {
        "type": "geojson",
        "data": data
      });
      map.addLayer({
        'id': 'fence',
        'type': 'fill',
        'source': 'geofence',
        'layout': {},
        'paint': {
          'fill-color': '#088',
          'fill-opacity': 0.5,
          'fill-outline-color': '#FFF'
        }
      });
    }

    function initCarIds(ip, socket, db, table, spatial_type, spatial_options, id_field){
      var url = getRangeIdsUri(ip, socket, db, table, spatial_type, spatial_options, id_field);
      var idsList = "";
      $.get(url, function(result){
        for(var index = 0; index < result.length&& index < 20; index++){
          ids.push(result[index].id);
          idsList += result[index].id + ",";
        }
        idsList = idsList.substring(0, idsList.length - 1);
        var url1 = "http://192.168.17.237:8080/es/GeoEnclosureQuery?indexName=df_history" +
          "&typeName=2017-12-17&spatialCondition=polygon:" + paramSpatialOption
          "&timefield=dataTime&idfield=imei&ids=" + idsList;
        $.get(url1, function(result)){

        });
      });


    }

    function loadData() {
      client.search({
        index: 'beijingtaxi', //数据库名称
        body: {
          size: 0, //此处返回的是hits的数组大小
          query: {
            bool: {
              filter: {
                range: {
                  'GPS_DateTime': {
                    from: startTime / 1000, //毫秒转换成秒
                    to: endTime * 1000 //毫秒转换成秒
                  }
                }
              }
            }
          },
          aggregations: {
            'geohash': {
              geohash_grid: {
                field: "geometry",
                precision: 10
              }
            }
          }
        }
      }, getData);
    };

    function getData(error, response) {
      var heatPoints = [];
      response.aggregations.geohash.buckets.forEach(function(bucket) {
        var coordinates = decodeGeoHash(bucket.key);
        var latlon = {
          lat: coordinates.latitude[2],
          lon: coordinates.longitude[2],
          count: bucket.doc_count
        }; //[0] min [1]max [2] 中心点
        heatPoints.push(latlon);
      });
      convertDataToGeoJson(heatPoints);
      updateView(geojson);
    }

    function convertDataToGeoJson(dataArray) {
      geojson = GeoJSON.parse(dataArray, {
        'Point': ['lat', 'lon']
      });
    }

    function updateView(data) {
      map.addSource('trackerheater', {
        "type": "geojson",
        "data": data
      });

      map.addLayer({
        "id": "tracker-heat",
        "type": "heatmap",
        "source": "trackerheater",
        "maxzoom": 16,
        "paint": {
          // Increase the heatmap weight based on frequency and property count
          "heatmap-weight": [
            "interpolate", ["linear"],
            ["get", "count"],
            0, 0,
            2, 2
          ],
          // Increase the heatmap color weight weight by zoom level
          // heatmap-intensity is a multiplier on top of heatmap-weight
          "heatmap-intensity": [
            "interpolate", ["linear"],
            ["zoom"],
            0, 1,
            haloDisapearlevel, 3
          ],
          // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).
          // Begin color ramp at 0-stop with a 0-transparancy color
          // to create a blur-like effect.
          "heatmap-color": [
            "interpolate", ["linear"],
            ["heatmap-density"],
            0, "rgba(33,102,172,0)",
            0.2, "rgb(103,169,207)",
            0.4, "rgb(209,229,240)",
            0.6, "rgb(253,219,199)",
            0.8, "rgb(239,138,98)",
            1, "rgb(178,24,43)"
          ],
          // Adjust the heatmap radius by zoom level
          "heatmap-radius": [
            "interpolate", ["linear"],
            ["zoom"],
            0, 2,
            haloDisapearlevel, 20 //随着级别增大，聚类半径从2增加到20，线型增加
          ],
          // Transition from heatmap to circle layer by zoom level
          "heatmap-opacity": [
            "interpolate", ["linear"],
            ["zoom"],
            9, 1,
            haloDisapearlevel, 0.5 //随着级别增加，光晕的透明度从1慢慢变成0.2
          ],
        }
      });

      map.addLayer({
        "id": "trackerheater-point",
        "type": "circle",
        "source": "trackerheater",
        "minzoom": 12,
        "paint": {
          // Size circle radius by earthquake magnitude and zoom level
          "circle-radius": [
            "interpolate", ["linear"],
            ["zoom"],
            13, [ //从出现等级-16之间半径根据count的数量从2-4递增
              "interpolate", ["linear"],
              ["get", "count"], //这里特别要注意，这里的count是geojson中的属性
              10, 0.5,
              60, 1
            ],
            14, [ //从
              "interpolate", ["linear"],
              ["get", "count"], //这里特别要注意，这里的count是geojson中的属性
              10, 10,
              60, 20
            ]
          ],
          // Color circle by earthquake magnitude
          "circle-color": [
            "interpolate", ["linear"],
            ["get", "count"], //这里特别要注意，这里的count是geojson中的属性
            10, "#FED976",
            20, "#FEB24C",
            30, "#FD8D3C",
            40, "#FC4E2A",
            50, "#BD0026",
            60, "#800026"
          ],
          "circle-stroke-color": "white",
          "circle-stroke-width": 1,
          // Transition from heatmap to circle layer by zoom level
          "circle-opacity": [
            "interpolate", ["linear"],
            ["zoom"],
            circleApearlevel, 0,
            16, 1
          ]
        }
      });

    }
  </script>
</body>

</html>
